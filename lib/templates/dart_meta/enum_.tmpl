#< if(_.doc != null) { >
${docComment(_.doc)}
#< } >
class ${_.enumName} {
#< int i = 0; >
#< for(var value in _.values) { >
  static const ${value.shout} = const ${_.enumName}._(${i++});
#< } >

  static get values => [
    ${_.values.map((v) => v.shout).join(",\n    ")}
  ];

  final int value;

  const ${_.enumName}._(this.value);

  String toString() {
    switch(this) {
#< for(var value in _.values) { >
      case ${value.shout}: return "${_.valueAsString(value)}";
#< } >
    }
  }

  static ${_.enumName} fromString(String s) {
    switch(s) {
#< for(var value in _.values) { >
      case "${_.valueAsString(value)}": return ${value.shout};
#< } >
    }
  }

#< if(_.jsonSupport) { >
  String toJson() => toString();
  static ${_.enumName} fromJson(String v) => fromString(v);

#<   if(_.hasRandJson) { >
  static String randJson() {
   return values[_randomJsonGenerator.nextInt(${_.values.length})].toString();
  }
#<   } >
#< } >
#< if(_.hasCustom) { >

${rightTrim(indentBlock(customBlock("enum ${_.name}")))}
#< } >

}
